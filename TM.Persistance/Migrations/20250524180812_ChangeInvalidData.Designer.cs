// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TM.Persistance;

#nullable disable

namespace TM.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524180812_ChangeInvalidData")]
    partial class ChangeInvalidData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("TM.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Guid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TM.Domain.Entities.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("Guid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("TM.Domain.Entities.Category.Category", b =>
                {
                    b.HasBaseType("TM.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("TM.Domain.Entities.Task.Task", b =>
                {
                    b.HasBaseType("TM.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("Guid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TaskStatusId")
                        .HasColumnType("Guid");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("Guid");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TM.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.HasBaseType("TM.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("TaskStatus");
                });

            modelBuilder.Entity("TM.Domain.Entities.User.User", b =>
                {
                    b.HasBaseType("TM.Domain.Entities.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TM.Domain.Entities.TaskType", b =>
                {
                    b.HasOne("TM.Domain.Entities.User.User", null)
                        .WithMany("Tasktypes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TM.Domain.Entities.Category.Category", b =>
                {
                    b.HasOne("TM.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TM.Domain.Entities.Category.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.User.User", null)
                        .WithMany("Сategories")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TM.Domain.Entities.Task.Task", b =>
                {
                    b.HasOne("TM.Domain.Entities.Category.Category", null)
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId");

                    b.HasOne("TM.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TM.Domain.Entities.Task.Task", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.Task.TaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.User.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TM.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.HasOne("TM.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TM.Domain.Entities.Task.TaskStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.User.User", null)
                        .WithMany("TaskStatuses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TM.Domain.Entities.User.User", b =>
                {
                    b.HasOne("TM.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("TM.Domain.Entities.User.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TM.Domain.Entities.Category.Category", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TM.Domain.Entities.User.User", b =>
                {
                    b.Navigation("TaskStatuses");

                    b.Navigation("Tasks");

                    b.Navigation("Tasktypes");

                    b.Navigation("Сategories");
                });
#pragma warning restore 612, 618
        }
    }
}
